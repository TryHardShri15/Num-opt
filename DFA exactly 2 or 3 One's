class FiniteAutomaton:
def __init__(self):
    # States: 0 (initial), 1 (one 1), 2 (two 1's, accepting), 3 (three 1's,
    accepting), 4 (more than three 1's)
    self.state = 0

def transition(self, input_char):
    if self.state == 0: # Start state
        if input_char == '1':
            self.state = 1
    # Remain in start state on '0'
    elif self.state == 1: # One '1' encountered
        if input_char == '1':
            self.state = 2
    # Stay in this state on '0'
    elif self.state == 2: # Two '1's encountered
        if input_char == '1':
            self.state = 3
    # Stay in this state on '0'
    elif self.state == 3: # Three '1's encountered
        if input_char == '1':
            self.state = 4 # More than three '1's
    # Stay in this state on '0'
    elif self.state == 4: # Dead state
        pass # Remain in dead state

def accepts(self, input_string):
    self.state = 0 # Reset to initial state
    for char in input_string:
        if char not in {'0', '1'}:
            raise ValueError("Input string can only contain '0' and '1'.")
        self.transition(char)
    # Accept if we're in states 2 or 3 (exactly two or three '1's)
    return self.state in {2, 3}

if __name__ == "__main__":
    fa = FiniteAutomaton()
    user_input = input("Enter a binary string (composed of 0s and 1s): ")

    try:
        result = fa.accepts(user_input)
        print(f"The string '{user_input}' is {'accepted' if result else 'not accepted'} by the FA.")
    except ValueError as e:
    print(e)
